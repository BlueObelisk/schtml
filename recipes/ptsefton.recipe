class Ontogenesis(BasicNewsRecipe):
    title          = u'ptsefton.com'
    oldest_article = 10000
    max_articles_per_feed = 1000

    feeds          = [(u'pt', u'http://ptsefton.com/toc')]
    remove_tags_before = dict(name='h1', attrs={'class':'entry-title'})
    remove_tags_after  = dict(name='div', attrs={'class':'entry-content'})
    remove_tags = [  dict(name='div', attrs={'class':'rendition-links'})]
    urls = []
    def parse_index(self):
        soup = self.index_to_soup('http://ptsefton.com/toc')

        

        articles = {}
        
        articles = []
        contents = soup.find(name="div", attrs={"class":"entry-content"})
	date = ""
	description = ""
	content = ""
        for a in contents.findAll("a", href=True):
             url = a['href']
	     self.urls.append(url)
             title = self.tag_to_string(a, use_alt=True).strip()
             pubdate = ""
             articles.append(dict(title=title, url=url, date=pubdate,
                             description=description,
                             content=content))
        return [(self.title , articles)]

    def postprocess_html(self, soup, first):
	entryDate = soup.find(name="div", attrs={"class": "entry-meta"})#.find(name="a", atrrs={"rel": "bookmark"})
        stripped = self.tag_to_string(entryDate, use_alt=True).strip().encode("utf-8")
	entryDate.replaceWith("<div class='entry-meta'>%s</div>" % stripped)
	for a in soup.findAll("a", href=True):
		url = a['href']
		if url in self.urls:
                        #TODO: Assumption - there is only one feed
			localLink = "../article_%s/index.html" % self.urls.index(url) 
                        a['href'] = localLink
			print "Found an internal link - changing %s to %s" % (url, localLink)
                
	return soup
